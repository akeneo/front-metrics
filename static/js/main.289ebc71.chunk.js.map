{"version":3,"sources":["model/Report.ts","components/ColorCell.tsx","components/NodeSummary.tsx","hooks/useSortedChildren.ts","hooks/useStorageState.ts","components/NodeChart.tsx","components/NodeCharts.tsx","components/NodeReport.tsx","App.tsx","hooks/useReport.ts","index.tsx"],"names":["getReportFromFolder","report","folders","length","currentFolder","otherFolders","type","undefined","children","getLevelForRatio","ratio","ColoredCell","styled","Table","Cell","color","level","gradient","getColorForLevel","NodeSummaryContainer","div","ColoredIconCard","IconCard","NodeSummary","percentFormatter","Intl","NumberFormat","style","minimumFractionDigits","metrics","typescript","javascript","label","format","icon","content","typescriptLOC","javascriptLOC","requireInTypescript","toString","defineInJavascript","reactClassComponent","bemInTypescript","reactController","backboneController","useSortedChildren","defaultValue","key","storageValue","localStorage","getItem","useState","JSON","parse","value","setValue","useEffect","setItem","stringify","useStorageState","columnName","sortDirection","sortedColumn","setSortedColumn","useMemo","direction","sort","a","b","name","localeCompare","sortChildren","NodeChartContainer","NodeChart","reportRoots","computedData","metric","map","reportRoot","time","reportName","computeData","Title","ResponsiveContainer","width","height","LineChart","data","XAxis","dataKey","tickFormatter","Date","toLocaleDateString","YAxis","Tooltip","Line","stroke","dot","NodeChartsContainer","NodeCharts","requireInJavascript","Object","keys","Header","copyToClipboard","text","navigator","clipboard","writeText","SpacedCell","Spacer","NodeReport","reports","onReportChange","url","useRouteMatch","path","substring","split","currentNode","values","sortedChildren","computeDirection","handleDirectionChange","useBooleanState","isDropdownOpen","openDropdown","closeDropdown","sortedReportList","first","second","Step","href","indexOf","onClick","Overlay","verticalPosition","onClose","ItemCollection","Item","sticky","HeaderCell","isSortable","onDirectionChange","Body","child","childUrl","Row","size","to","ghost","title","App","currentReportName","setCurrentReportName","currentReport","setCurrentReport","setReports","fetch","response","json","useReport","handleReportChange","exact","GlobalStyle","createGlobalStyle","CommonStyle","window","location","hash","ReactDOM","render","StrictMode","theme","onboarderTheme","document","getElementById"],"mappings":"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","file":"static/js/main.289ebc71.chunk.js","sourcesContent":["type ReportMetric = {\n  typescript: number;\n  typescriptLOC: number;\n  javascript: number;\n  javascriptLOC: number;\n  requireInJavascript: number;\n  requireInTypescript: number;\n  defineInJavascript: number;\n  reactClassComponent: number;\n  bemInTypescript: number;\n  reactController: number;\n  backboneController: number;\n};\n\ntype ReportRoot = Report & {\n  reportName: string;\n};\n\ntype Report = {\n  directoryPath: string;\n  path: string;\n  name: string;\n  metrics: ReportMetric;\n} & (\n  | {\n      type: 'directory';\n      children: {\n        [key: string]: Report;\n      };\n    }\n  | {\n      type: 'file';\n    }\n);\n\nconst getReportFromFolder = (report: Report, folders: string[]): Report => {\n  if (0 === folders.length) {\n    return report;\n  }\n\n  const [currentFolder, ...otherFolders] = folders;\n  if ('file' === report.type || undefined === currentFolder) {\n    return report;\n  }\n\n  return getReportFromFolder(report.children[currentFolder], otherFolders);\n};\n\nexport {getReportFromFolder};\nexport type {Report, ReportMetric, ReportRoot};\n","import {Level, Table, AkeneoThemedProps, getColorForLevel} from 'akeneo-design-system';\nimport styled from 'styled-components';\n\nconst getLevelForRatio = (ratio: number): [Level, number] => {\n  if (ratio < 0.4) return ['danger', 40];\n  if (ratio < 0.6) return ['danger', 20];\n  if (ratio < 0.8) return ['warning', 40];\n  if (ratio < 0.95) return ['warning', 20];\n  if (ratio < 1) return ['primary', 20];\n\n  return ['primary', 40];\n};\n\nconst ColoredCell = styled(Table.Cell)<{color: [Level, number]} & AkeneoThemedProps>`\n  background-color: ${({color: [level, gradient]}) => getColorForLevel(level, gradient)};\n`;\n\nexport {ColoredCell, getLevelForRatio};\n","import {\n  ActivityIcon,\n  AkeneoThemedProps,\n  AssociateIcon,\n  AttributeLinkIcon,\n  ComponentIcon,\n  EntityMultiIcon,\n  FactoryIcon,\n  getColorForLevel,\n  IconCard,\n  Level,\n  RefreshIcon,\n} from 'akeneo-design-system';\nimport {Report} from '../model/Report';\nimport styled from 'styled-components';\nimport {getLevelForRatio} from './ColorCell';\n\nconst NodeSummaryContainer = styled.div`\n  margin: 20px 0;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst ColoredIconCard = styled(IconCard)<{color: [Level, number]} & AkeneoThemedProps>`\n  & > div:nth-child(2) > div:nth-child(1),\n  svg {\n    color: ${({color: [level, gradient]}) => getColorForLevel(level, gradient + 40)};\n  }\n`;\n\ntype NodeSummaryProps = {\n  report: Report;\n};\n\nconst NodeSummary = ({report}: NodeSummaryProps) => {\n  const percentFormatter = new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: 2,\n  });\n\n  return (\n    <NodeSummaryContainer>\n      <ColoredIconCard\n        color={getLevelForRatio(report.metrics.typescript / (report.metrics.javascript + report.metrics.typescript))}\n        label={percentFormatter.format(\n          report.metrics.typescript / (report.metrics.javascript + report.metrics.typescript)\n        )}\n        icon={<ActivityIcon />}\n        content=\"Typescript ratio\"\n      />\n      <ColoredIconCard\n        color={getLevelForRatio(\n          report.metrics.typescriptLOC / (report.metrics.javascriptLOC + report.metrics.typescriptLOC)\n        )}\n        label={report.metrics.requireInTypescript.toString()}\n        icon={<AttributeLinkIcon />}\n        content=\"Require in typescript\"\n      />\n      <ColoredIconCard\n        color={[0 < report.metrics.requireInTypescript ? 'danger' : 'primary', 60]}\n        label={report.metrics.defineInJavascript.toString()}\n        icon={<AssociateIcon />}\n        content=\"Number of legacy files\"\n      />\n      <ColoredIconCard\n        color={[0 < report.metrics.requireInTypescript ? 'danger' : 'primary', 60]}\n        label={report.metrics.reactClassComponent.toString()}\n        icon={<RefreshIcon />}\n        content=\"React classes\"\n      />\n      <ColoredIconCard\n        color={[0 < report.metrics.bemInTypescript ? 'danger' : 'primary', 60]}\n        label={report.metrics.bemInTypescript.toString()}\n        icon={<EntityMultiIcon />}\n        content=\"BEM in typescript\"\n      />\n      <ColoredIconCard\n        color={[0 < report.metrics.reactController ? 'danger' : 'primary', 60]}\n        label={report.metrics.reactController.toString()}\n        icon={<FactoryIcon />}\n        content=\"Legacy bridges\"\n      />\n      <ColoredIconCard\n        color={[0 < report.metrics.backboneController ? 'danger' : 'primary', 60]}\n        label={report.metrics.backboneController.toString()}\n        icon={<ComponentIcon />}\n        content=\"Backbone controllers\"\n      />\n    </NodeSummaryContainer>\n  );\n};\n\nexport {NodeSummary};\n","import {useMemo} from 'react';\nimport {Report, ReportMetric} from '../model/Report';\nimport {useStorageState} from './useStorageState';\n\ntype SortDirection = 'none' | 'ascending' | 'descending';\n\nconst useSortedChildren = (children: Report[]) => {\n  const [sortedColumn, setSortedColumn] = useStorageState<{\n    columnName: keyof ReportMetric | 'name' | null;\n    sortDirection: SortDirection;\n  }>(\n    {\n      columnName: null,\n      sortDirection: 'none',\n    },\n    'sort_state'\n  );\n\n  const computeDirection = (columnName: string) => {\n    if (columnName !== sortedColumn.columnName) {\n      return 'none';\n    }\n\n    return sortedColumn.sortDirection;\n  };\n\n  const handleDirectionChange = (columnName: keyof ReportMetric | 'name') => (sortDirection: SortDirection) => {\n    setSortedColumn({\n      columnName: columnName,\n      sortDirection: sortDirection,\n    });\n  };\n\n  const sortChildren = (\n    children: Report[],\n    columnName: keyof ReportMetric | 'name' | null,\n    direction: SortDirection\n  ) => {\n    if (columnName === null) {\n      return children;\n    }\n\n    if (columnName === 'name') {\n      return [...children].sort((a, b) => {\n        return direction === 'ascending' ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);\n      });\n    }\n\n    return [...children].sort((a, b) => {\n      return direction === 'ascending'\n        ? a.metrics[columnName] - b.metrics[columnName]\n        : b.metrics[columnName] - a.metrics[columnName];\n    });\n  };\n\n  const sortedChildren = useMemo(\n    () => sortChildren(children, sortedColumn.columnName, sortedColumn.sortDirection),\n    [sortedColumn, children]\n  );\n\n  return [sortedChildren, computeDirection, handleDirectionChange] as const;\n};\n\nexport {useSortedChildren};\n","import {useState, useEffect, SetStateAction, Dispatch} from 'react';\n\nconst useStorageState = <StateType>(\n  defaultValue: StateType,\n  key: string\n): [StateType, Dispatch<SetStateAction<StateType>>] => {\n  const storageValue = localStorage.getItem(key) as string;\n  const [value, setValue] = useState<StateType>(null !== storageValue ? JSON.parse(storageValue) : defaultValue);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value, key]);\n\n  return [value, setValue];\n};\n\nexport {useStorageState};\n","import {Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\nimport {ReportMetric, ReportRoot} from '../model/Report';\nimport {SectionTitle} from 'akeneo-design-system';\nimport styled from 'styled-components';\n\nconst NodeChartContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\ntype NodeChartProps = {\n  reportRoots: ReportRoot[];\n  metric: keyof ReportMetric;\n  label: string;\n};\n\nconst computeData = (reportRoots: ReportRoot[], metric: keyof ReportMetric) => {\n  return reportRoots.map(reportRoot => {\n    return {\n      value: reportRoot.metrics[metric],\n      time: reportRoot.reportName,\n    };\n  });\n};\n\nconst NodeChart = ({reportRoots, label, metric}: NodeChartProps) => {\n  const computedData = computeData(reportRoots, metric);\n\n  return (\n    <NodeChartContainer>\n      <SectionTitle>\n        <SectionTitle.Title>{label}</SectionTitle.Title>\n      </SectionTitle>\n      <ResponsiveContainer width=\"95%\" height={400}>\n        <LineChart data={computedData}>\n          <XAxis\n            dataKey=\"time\"\n            name=\"Time\"\n            tickFormatter={time => new Date(time).toLocaleDateString('en-US')}\n            type=\"category\"\n          />\n          <YAxis dataKey=\"value\" name=\"Value\" />\n          <Tooltip />\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </NodeChartContainer>\n  );\n};\n\nexport {NodeChart};\n","import React from 'react';\nimport {ReportMetric, ReportRoot} from '../model/Report';\nimport {NodeChart} from './NodeChart';\nimport styled from 'styled-components';\n\nconst NodeChartsContainer = styled.div`\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 20px;\n`;\n\ntype NodeChartsProps = {\n  reportRoots: ReportRoot[];\n};\n\nconst NodeCharts = ({reportRoots}: NodeChartsProps) => {\n  const metrics: {[metricCode: string]: string} = {\n    typescriptLOC: 'Typescript line of code',\n    javascriptLOC: 'Javascript line of code',\n    requireInJavascript: 'Require in javascript',\n    requireInTypescript: 'Require in typescript',\n    reactClassComponent: 'React classes',\n    bemInTypescript: 'BEM in typescript',\n    reactController: 'Legacy bridges',\n    backboneController: 'Backbone controllers',\n  };\n\n  return (\n    <NodeChartsContainer>\n      {Object.keys(metrics).map(metric => (\n        <NodeChart\n          metric={metric as keyof ReportMetric}\n          label={metrics[metric]}\n          reportRoots={reportRoots}\n          key={metric}\n        />\n      ))}\n    </NodeChartsContainer>\n  );\n};\n\nexport {NodeCharts};\n","import {\n  Badge,\n  Breadcrumb,\n  CopyIcon,\n  Dropdown,\n  FileIcon,\n  FolderIcon,\n  IconButton,\n  SwitcherButton,\n  Table,\n  useBooleanState,\n} from 'akeneo-design-system';\nimport {Link, useRouteMatch} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {getReportFromFolder, Report, ReportRoot} from '../model/Report';\nimport {NodeSummary} from './NodeSummary';\nimport {ColoredCell, getLevelForRatio} from './ColorCell';\nimport {useSortedChildren} from '../hooks/useSortedChildren';\nimport {NodeCharts} from './NodeCharts';\nimport {useMemo} from 'react';\n\nconst Header = styled.div`\n  display: flex;\n`;\n\nconst canCopyToClipboard = (): boolean => 'clipboard' in navigator;\n\nconst copyToClipboard = (text: string) => canCopyToClipboard() && navigator.clipboard.writeText(text);\n\nconst SpacedCell = styled(Table.Cell)`\n  & > div {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\ntype NodeReportProps = {\n  report: Report;\n  reportName: string | null;\n  reports: ReportRoot[];\n  onReportChange: (newReport: string) => void;\n};\n\nconst NodeReport = ({report, reportName, reports, onReportChange}: NodeReportProps) => {\n  const {url} = useRouteMatch();\n  const path = url.substring(1);\n  const folders = !path ? [] : path.split('/');\n  const currentNode = getReportFromFolder(report, folders);\n  const [sortedChildren, computeDirection, handleDirectionChange] = useSortedChildren(\n    'file' === currentNode.type ? [] : Object.values(currentNode.children)\n  );\n  const [isDropdownOpen, openDropdown, closeDropdown] = useBooleanState();\n\n  const sortedReportList = useMemo(() => {\n    const sortedReports = [...reports].sort((first: ReportRoot, second: ReportRoot) =>\n      second.reportName.localeCompare(first.reportName)\n    );\n\n    return sortedReports;\n  }, [reports]);\n\n  if ('file' === currentNode.type) {\n    return null;\n  }\n\n  return (\n    <>\n      <Header>\n        <Breadcrumb>\n          <Breadcrumb.Step href=\"#/\">Root</Breadcrumb.Step>\n          {folders.map((name: string) => (\n            <Breadcrumb.Step key={name} href={`#${url.substring(0, url.indexOf(name))}${name}`}>\n              {name}\n            </Breadcrumb.Step>\n          ))}\n        </Breadcrumb>\n        <Spacer />\n        <Dropdown>\n          <SwitcherButton label=\"Report\" onClick={openDropdown}>\n            {reportName}\n          </SwitcherButton>\n          {isDropdownOpen && (\n            <Dropdown.Overlay verticalPosition=\"down\" onClose={closeDropdown}>\n              <Dropdown.Header>\n                <Dropdown.Title>Reports</Dropdown.Title>\n              </Dropdown.Header>\n              <Dropdown.ItemCollection>\n                {sortedReportList.map(report => (\n                  <Dropdown.Item\n                    key={report.reportName}\n                    onClick={() => {\n                      onReportChange(report.reportName);\n                      closeDropdown();\n                    }}\n                  >\n                    {report.reportName}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.ItemCollection>\n            </Dropdown.Overlay>\n          )}\n        </Dropdown>\n      </Header>\n      <NodeSummary report={currentNode} />\n      <Table>\n        <Table.Header sticky={0}>\n          <Table.HeaderCell\n            isSortable={true}\n            onDirectionChange={handleDirectionChange('name')}\n            sortDirection={computeDirection('name')}\n          >\n            Name\n          </Table.HeaderCell>\n          <Table.HeaderCell>Typescript ratio (File)</Table.HeaderCell>\n          <Table.HeaderCell>Typescript ratio (LOC)</Table.HeaderCell>\n          <Table.HeaderCell\n            isSortable={true}\n            onDirectionChange={handleDirectionChange('requireInTypescript')}\n            sortDirection={computeDirection('requireInTypescript')}\n          >\n            Require in typescript\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            isSortable={true}\n            onDirectionChange={handleDirectionChange('defineInJavascript')}\n            sortDirection={computeDirection('defineInJavascript')}\n          >\n            Number of legacy files\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            isSortable={true}\n            onDirectionChange={handleDirectionChange('reactClassComponent')}\n            sortDirection={computeDirection('reactClassComponent')}\n          >\n            React classes\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            isSortable={true}\n            onDirectionChange={handleDirectionChange('bemInTypescript')}\n            sortDirection={computeDirection('bemInTypescript')}\n          >\n            BEM in typescript\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            isSortable={true}\n            onDirectionChange={handleDirectionChange('reactController')}\n            sortDirection={computeDirection('reactController')}\n          >\n            Legacy bridges\n          </Table.HeaderCell>\n          <Table.HeaderCell\n            isSortable={true}\n            onDirectionChange={handleDirectionChange('backboneController')}\n            sortDirection={computeDirection('backboneController')}\n          >\n            Backbone controllers\n          </Table.HeaderCell>\n        </Table.Header>\n        <Table.Body>\n          {sortedChildren.map(child => {\n            const childUrl = '/' === url ? `/${child.name}` : `${url}/${child.name}`;\n            const percentFormatter = new Intl.NumberFormat('en-US', {\n              style: 'percent',\n              minimumFractionDigits: 2,\n            });\n\n            return (\n              <Table.Row key={child.name}>\n                <SpacedCell>\n                  {'file' === child.type ? <FileIcon size={20} /> : <FolderIcon size={20} />}&nbsp;&nbsp;\n                  {'file' === child.type ? child.name : <Link to={childUrl}>{child.name}</Link>}\n                  <IconButton\n                    size=\"small\"\n                    ghost=\"borderless\"\n                    level=\"tertiary\"\n                    icon={<CopyIcon />}\n                    title=\"Copy to clipboard\"\n                    onClick={() => copyToClipboard(child.path)}\n                  />\n                  <Spacer />\n                  {'directory' === child.type && (\n                    <Badge>\n                      {child.metrics.javascriptLOC + child.metrics.typescriptLOC} |{' '}\n                      {child.metrics.javascript + child.metrics.typescript}\n                    </Badge>\n                  )}\n                </SpacedCell>\n                <ColoredCell\n                  color={getLevelForRatio(\n                    child.metrics.typescript / (child.metrics.javascript + child.metrics.typescript)\n                  )}\n                  title={`${child.metrics.typescript} / ${child.metrics.javascript + child.metrics.typescript}`}\n                >\n                  {percentFormatter.format(\n                    child.metrics.typescript / (child.metrics.javascript + child.metrics.typescript)\n                  )}{' '}\n                  ({child.metrics.javascript} javascript files)\n                </ColoredCell>\n                <ColoredCell\n                  color={getLevelForRatio(\n                    child.metrics.typescriptLOC / (child.metrics.javascriptLOC + child.metrics.typescriptLOC)\n                  )}\n                  title={`${child.metrics.typescriptLOC} / ${\n                    child.metrics.javascriptLOC + child.metrics.typescriptLOC\n                  }`}\n                >\n                  {percentFormatter.format(\n                    child.metrics.typescriptLOC / (child.metrics.javascriptLOC + child.metrics.typescriptLOC)\n                  )}{' '}\n                  ({child.metrics.javascriptLOC} javascript LOC)\n                </ColoredCell>\n                <ColoredCell color={[0 < child.metrics.requireInTypescript ? 'danger' : 'primary', 40]}>\n                  {child.metrics.requireInTypescript}\n                </ColoredCell>\n                <Table.Cell>{child.metrics.defineInJavascript}</Table.Cell>\n                <ColoredCell color={[0 < child.metrics.reactClassComponent ? 'danger' : 'primary', 40]}>\n                  {child.metrics.reactClassComponent}\n                </ColoredCell>\n                <ColoredCell color={[0 < child.metrics.bemInTypescript ? 'danger' : 'primary', 40]}>\n                  {child.metrics.bemInTypescript}\n                </ColoredCell>\n                <Table.Cell>{child.metrics.reactController}</Table.Cell>\n                <Table.Cell>{child.metrics.backboneController}</Table.Cell>\n              </Table.Row>\n            );\n          })}\n        </Table.Body>\n      </Table>\n      {folders.length === 0 && <NodeCharts reportRoots={reports} />}\n    </>\n  );\n};\n\nexport {NodeReport};\n","import {Switch, Route, HashRouter} from 'react-router-dom';\nimport {NodeReport} from './components/NodeReport';\nimport {useReport} from './hooks/useReport';\n\nconst App = () => {\n  const [report, reportName, reports, handleReportChange] = useReport();\n\n  if (null === report) {\n    return <div>Loading</div>;\n  }\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/:path+/\">\n          <NodeReport report={report} reports={reports} reportName={reportName} onReportChange={handleReportChange} />\n        </Route>\n        <Route exact path=\"/\">\n          <NodeReport report={report} reports={reports} reportName={reportName} onReportChange={handleReportChange} />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import {useEffect, useState} from 'react';\nimport {ReportRoot} from '../model/Report';\n\nconst useReport = () => {\n  const [currentReportName, setCurrentReportName] = useState<string | null>(null);\n  const [currentReport, setCurrentReport] = useState<ReportRoot | null>(null);\n  const [reports, setReports] = useState<ReportRoot[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetch('./reports.json');\n      const reports = await response.json();\n\n      setReports(reports);\n      setCurrentReportName(reports[reports.length - 1].reportName);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!currentReportName) return;\n\n    (async () => {\n      const response = await fetch(`./reports/${currentReportName}.json`);\n\n      setCurrentReport(await response.json());\n    })();\n  }, [currentReportName]);\n\n  return [currentReport, currentReportName, reports, setCurrentReportName] as const;\n};\n\nexport {useReport};\n","import {CommonStyle, onboarderTheme} from 'akeneo-design-system';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createGlobalStyle, ThemeProvider} from 'styled-components';\nimport App from './App';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 20px;\n    ${CommonStyle};\n  }\n`;\n\nif (0 !== window.location.hash.indexOf('#/')) {\n  window.location.href = `${window.location.href}/#/`;\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={onboarderTheme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}